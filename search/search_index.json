{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Streamer Setup Development To write code and generate the documentation you need to install the packages listed in requirements.dev.txt with pip pip install -r requirements.dev.txt To use the surrortg-sdk initialize and update the submodule with: git submodule init git submodule update Note To import modules from the surrortg-sdk you have to extend the PYTHONPATH : import sys , os sys . path . insert ( 1 , os . path . join ( os . path . dirname ( os . path . abspath ( __file__ )), os . pardir , \"lib\" , \"surrortg-sdk\" )) from surrortg import <...> Documentation The Documentation is generated with the help of mkdocstrings . To implement a module, class or function into your documentation you have to reference it as follows: ::: library.module ::: library.module.class ::: library.module.function On Device For the usage on Device the packages listed in requirements.txt should be installed: pip install -r requirements.txt Next run scripts/generate-config to generate a streamerconfiguration with your gametoken and a device ID at ./srtg.toml To activate/update the streamerconfiguration on your device run `scripts/streamer-setup Warning This will replace the /etc/srtg/srtg.toml from the Surrogate SDK Finally setup the controller service with scripts/systemd-setup Warning This will replace the controller.service from the Surrogate SDK","title":"Setup"},{"location":"#streamer-setup","text":"","title":"Streamer Setup"},{"location":"#development","text":"To write code and generate the documentation you need to install the packages listed in requirements.dev.txt with pip pip install -r requirements.dev.txt To use the surrortg-sdk initialize and update the submodule with: git submodule init git submodule update Note To import modules from the surrortg-sdk you have to extend the PYTHONPATH : import sys , os sys . path . insert ( 1 , os . path . join ( os . path . dirname ( os . path . abspath ( __file__ )), os . pardir , \"lib\" , \"surrortg-sdk\" )) from surrortg import <...>","title":"Development"},{"location":"#documentation","text":"The Documentation is generated with the help of mkdocstrings . To implement a module, class or function into your documentation you have to reference it as follows: ::: library.module ::: library.module.class ::: library.module.function","title":"Documentation"},{"location":"#on-device","text":"For the usage on Device the packages listed in requirements.txt should be installed: pip install -r requirements.txt Next run scripts/generate-config to generate a streamerconfiguration with your gametoken and a device ID at ./srtg.toml To activate/update the streamerconfiguration on your device run `scripts/streamer-setup Warning This will replace the /etc/srtg/srtg.toml from the Surrogate SDK Finally setup the controller service with scripts/systemd-setup Warning This will replace the controller.service from the Surrogate SDK","title":"On Device"},{"location":"sdk/","text":"Game SDK for Controller Structure Controls classDiagram class Input~abc.ABC~{ +__init__(int seat, str name) +reset(int seat) +getName() } class Joystick{ +JoystickPosition joystick_pos +__init__(int seat, str name, JoystickPosition joystick_pos) +get_direction(int x, int y) } Joystick --|> Input class JoystickPosition~enum.Enum~{ LEFT = 0 RIGHT = 1 } Joystick ..> JoystickPosition Switch --|> Input class Switch{ +KeyCode key_bind +__init__(int seat, str name, KeyCode key_bind) +on(int seat) +off(ind seat) } class KeyCode~enum.Enum~{ } Switch ..> KeyCode Game classDiagram class Game{ +list controls +dict config +on_init() +on_start() +on_end() +run(str conf_path, int log_level) } MQTT Communication","title":"SDK"},{"location":"sdk/#game-sdk-for-controller","text":"","title":"Game SDK for Controller"},{"location":"sdk/#structure","text":"","title":"Structure"},{"location":"sdk/#controls","text":"classDiagram class Input~abc.ABC~{ +__init__(int seat, str name) +reset(int seat) +getName() } class Joystick{ +JoystickPosition joystick_pos +__init__(int seat, str name, JoystickPosition joystick_pos) +get_direction(int x, int y) } Joystick --|> Input class JoystickPosition~enum.Enum~{ LEFT = 0 RIGHT = 1 } Joystick ..> JoystickPosition Switch --|> Input class Switch{ +KeyCode key_bind +__init__(int seat, str name, KeyCode key_bind) +on(int seat) +off(ind seat) } class KeyCode~enum.Enum~{ } Switch ..> KeyCode","title":"Controls"},{"location":"sdk/#game","text":"classDiagram class Game{ +list controls +dict config +on_init() +on_start() +on_end() +run(str conf_path, int log_level) }","title":"Game"},{"location":"sdk/#mqtt-communication","text":"","title":"MQTT Communication"}]}