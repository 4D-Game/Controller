{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Controller Setup Development To write code and generate the documentation you need to install the packages listed in requirements.txt with pip pip3 install -r requirements.txt PYTHONPATH To use the 4DGame SDK you have do add the lib folder to your PYTHONPATH variable. Additionally add the src folder to your PYTHONPATH for nicer imports and automatic documentation. export PYTHONPATH = \" $( pwd ) /src: $( pwd ) /lib\" Documentation The Documentation is generated with the help of mkdocstrings . To implement a module, class or function into your documentation you have to reference it as follows: ::: library.module ::: library.module.class ::: library.module.function On Device For the usage on Device the packages listed in requirements.txt should be installed: pip install -r requirements.txt Next setup the controller service with scripts/systemd-setup","title":"Setup"},{"location":"#controller-setup","text":"","title":"Controller Setup"},{"location":"#development","text":"To write code and generate the documentation you need to install the packages listed in requirements.txt with pip pip3 install -r requirements.txt","title":"Development"},{"location":"#pythonpath","text":"To use the 4DGame SDK you have do add the lib folder to your PYTHONPATH variable. Additionally add the src folder to your PYTHONPATH for nicer imports and automatic documentation. export PYTHONPATH = \" $( pwd ) /src: $( pwd ) /lib\"","title":"PYTHONPATH"},{"location":"#documentation","text":"The Documentation is generated with the help of mkdocstrings . To implement a module, class or function into your documentation you have to reference it as follows: ::: library.module ::: library.module.class ::: library.module.function","title":"Documentation"},{"location":"#on-device","text":"For the usage on Device the packages listed in requirements.txt should be installed: pip install -r requirements.txt Next setup the controller service with scripts/systemd-setup","title":"On Device"},{"location":"example/ledtestgame/","text":"Running a LED Test Game Game Setup Hardware Connect a LED with a resistor (330\u2126) to the Pi. The anode (long leg) of the LED should be connected to PIN 17, the cathode (short leg) to the GND. Software First of all, make sure that the Game-SDK is downloaded on your desired controller (Raspberry Pi). Also the XBox controllers should be connected to the Raspberry via bluetooth. To run the LEDTestGame you have to change into the examples folder and execute ledTestGame.py with the python-statement. Gameplay To be part of the game you have to press the B-button on the XBox controller because this will send a \"ready\"-signal. The goal is to turn the LED ten times on by pressing the A-button. After the first player has reached this score, the game ends. If you want to play another round you have to push the B-button again.","title":"LEDTestGame"},{"location":"example/ledtestgame/#running-a-led-test-game","text":"","title":"Running a LED Test Game"},{"location":"example/ledtestgame/#game-setup","text":"","title":"Game Setup"},{"location":"example/ledtestgame/#hardware","text":"Connect a LED with a resistor (330\u2126) to the Pi. The anode (long leg) of the LED should be connected to PIN 17, the cathode (short leg) to the GND.","title":"Hardware"},{"location":"example/ledtestgame/#software","text":"First of all, make sure that the Game-SDK is downloaded on your desired controller (Raspberry Pi). Also the XBox controllers should be connected to the Raspberry via bluetooth. To run the LEDTestGame you have to change into the examples folder and execute ledTestGame.py with the python-statement.","title":"Software"},{"location":"example/ledtestgame/#gameplay","text":"To be part of the game you have to press the B-button on the XBox controller because this will send a \"ready\"-signal. The goal is to turn the LED ten times on by pressing the A-button. After the first player has reached this score, the game ends. If you want to play another round you have to push the B-button again.","title":"Gameplay"},{"location":"sdk/","text":"Game SDK for Controller Structure Controls classDiagram class Input~abc.ABC~{ +__init__(int seat, str name) +reset(int seat) +close(int seat) +getName() } class Joystick{ +JoystickCode joystick_pos +float threshhold = 0.1 +last_pos = 0 +__init__(int seat, str name) +_mapPosition(int pos) +set_direction(int seat, int pos) +get_direction(int seat, float pos) } Joystick --|> Input class JoystickCode~enum.Enum~{ LEFT_Y = 0 LEFT_X = 1 RIGHT_Y = 2 RIGHT_X = 3 } Joystick ..> JoystickCode class JoystickPos~enum.Enum~{ LEFT = 0 RIGHT = 1 } Joystick ..> JoystickPos Switch --|> Input class Switch{ +KeyCode key_bind +__init__(int seat, str name, KeyCode key_bind) +on(int seat) +off(ind seat) } class KeyCode~enum.Enum~{ BUT_0 = 0 BUT_1 = 1 BUT_2 = 2 BUT_3 = 3 DPAD_X = 4 DPAD_Y = 5 L1 = 6 L2 = 7 R1 = 8 R2 = 9 } Switch ..> KeyCode class GamePad { +dict key_map +dict joystick_map +__init__(str name, dict key_map, dict joystick_map) +mapKey(int code) } GamePad ..> KeyCode GamePad ..> JoystickCode Game classDiagram class Game{ +dict controls +KeyCode ready_control +dict config +GameState game_state -evdev.InputDevice input_dev -bool is_running -GameIO game_io +GameIO game_io +on_init() +on_pregame() +on_start() +on_end() -ctl_sub() -game_io_sub() -run(str conf_path) +run(str conf_path, int log_level) } class LogLevel~enum.Enum~{ +CRITICAL = 50 +ERROR = 40 +WARNING = 30 +INFO = 20 +DEBUG = 10 +NOTSET = 0 } Game ..> LogLevel class GameIO{ +asyncio_mqtt.Client client +__init__(dict mqtt_conf) +connect() +subscribe() +publish(str topic, dict payload) +ready(int seat) +score(int score, int seat) } Game ..> GameIO class GameState~enum.Enum~{ IDLE = \"idle\" START = \"start\" RUN = \"run\" END = \"end\" } GameIO ..> GameState Game ..> GameState","title":"Structure"},{"location":"sdk/#game-sdk-for-controller","text":"","title":"Game SDK for Controller"},{"location":"sdk/#structure","text":"","title":"Structure"},{"location":"sdk/#controls","text":"classDiagram class Input~abc.ABC~{ +__init__(int seat, str name) +reset(int seat) +close(int seat) +getName() } class Joystick{ +JoystickCode joystick_pos +float threshhold = 0.1 +last_pos = 0 +__init__(int seat, str name) +_mapPosition(int pos) +set_direction(int seat, int pos) +get_direction(int seat, float pos) } Joystick --|> Input class JoystickCode~enum.Enum~{ LEFT_Y = 0 LEFT_X = 1 RIGHT_Y = 2 RIGHT_X = 3 } Joystick ..> JoystickCode class JoystickPos~enum.Enum~{ LEFT = 0 RIGHT = 1 } Joystick ..> JoystickPos Switch --|> Input class Switch{ +KeyCode key_bind +__init__(int seat, str name, KeyCode key_bind) +on(int seat) +off(ind seat) } class KeyCode~enum.Enum~{ BUT_0 = 0 BUT_1 = 1 BUT_2 = 2 BUT_3 = 3 DPAD_X = 4 DPAD_Y = 5 L1 = 6 L2 = 7 R1 = 8 R2 = 9 } Switch ..> KeyCode class GamePad { +dict key_map +dict joystick_map +__init__(str name, dict key_map, dict joystick_map) +mapKey(int code) } GamePad ..> KeyCode GamePad ..> JoystickCode","title":"Controls"},{"location":"sdk/#game","text":"classDiagram class Game{ +dict controls +KeyCode ready_control +dict config +GameState game_state -evdev.InputDevice input_dev -bool is_running -GameIO game_io +GameIO game_io +on_init() +on_pregame() +on_start() +on_end() -ctl_sub() -game_io_sub() -run(str conf_path) +run(str conf_path, int log_level) } class LogLevel~enum.Enum~{ +CRITICAL = 50 +ERROR = 40 +WARNING = 30 +INFO = 20 +DEBUG = 10 +NOTSET = 0 } Game ..> LogLevel class GameIO{ +asyncio_mqtt.Client client +__init__(dict mqtt_conf) +connect() +subscribe() +publish(str topic, dict payload) +ready(int seat) +score(int score, int seat) } Game ..> GameIO class GameState~enum.Enum~{ IDLE = \"idle\" START = \"start\" RUN = \"run\" END = \"end\" } GameIO ..> GameState Game ..> GameState","title":"Game"},{"location":"sdk/config-file/","text":"Config File To configure the game sdk a config.toml can be created. The path to it can be set when executing Game.run(config_path=\"path/to/your/config.toml\") . The default path is /home/pi/Controller/config.toml Structure Example seat = 1 [CONTROLLER] input_device = \"/dev/input/event1\" [MQTT] broker_ip = \"192.168.1.20\" borker_port = \"1883\" username = \"mqtt\" password = \"secret\" int seat : ID of your controller CONTROLLER Configuration for the connected gamepad str input_device : Path to your input device MQTT Configuration to connect to the mqtt broker of the gamecontrol str broker_ip : Adress to your mqtt broker str broker_port (Optional): MQTT Port of your broker (default 1883 ) str username (Optional): Username for authentifikation (default NONE ) str password (Optional): Password for authentifikation (default NONE )","title":"Config File"},{"location":"sdk/config-file/#config-file","text":"To configure the game sdk a config.toml can be created. The path to it can be set when executing Game.run(config_path=\"path/to/your/config.toml\") . The default path is /home/pi/Controller/config.toml","title":"Config File"},{"location":"sdk/config-file/#structure","text":"Example seat = 1 [CONTROLLER] input_device = \"/dev/input/event1\" [MQTT] broker_ip = \"192.168.1.20\" borker_port = \"1883\" username = \"mqtt\" password = \"secret\" int seat : ID of your controller","title":"Structure"},{"location":"sdk/config-file/#controller","text":"Configuration for the connected gamepad str input_device : Path to your input device","title":"CONTROLLER"},{"location":"sdk/config-file/#mqtt","text":"Configuration to connect to the mqtt broker of the gamecontrol str broker_ip : Adress to your mqtt broker str broker_port (Optional): MQTT Port of your broker (default 1883 ) str username (Optional): Username for authentifikation (default NONE ) str password (Optional): Password for authentifikation (default NONE )","title":"MQTT"},{"location":"sdk/key-maps/","text":"Key Maps XBox Wireless: XBox Key Code 4DGame SDK Code A 304 BUT_0 B 305 BUT_1 X 307 BUT_2 Y 308 BUT_3 D-PAD X 16 DPAD_X D-PAD Y 17 DPAD_Y L1 310 L1 L2 10 L2 R1 311 R1 R2 9 R2 XBox Joystick Dimension Code 4DGame SDK Code LEFT_X 0 LEFT_X LEFT_Y 1 LEFT_Y RIGHT_X 2 RIGHT_X RIGHT_Y 5 RIGHT_Y XBox 360 Wireless: XBox Key Code 4DGame SDK Code A 304 BUT_0 B 305 BUT_1 X 307 BUT_2 Y 308 BUT_3 D-PAD X 16 DPAD_X D-PAD Y 17 DPAD_Y L1 310 L1 L2 10 L2 R1 311 R1 R2 9 R2 XBox Joystick Dimension Code 4DGame SDK Code LEFT_X 0 LEFT_X LEFT_Y 1 LEFT_Y RIGHT_X 3 RIGHT_X RIGHT_Y 4 RIGHT_Y","title":"Key Maps"},{"location":"sdk/key-maps/#key-maps","text":"","title":"Key Maps"},{"location":"sdk/key-maps/#xbox-wireless","text":"XBox Key Code 4DGame SDK Code A 304 BUT_0 B 305 BUT_1 X 307 BUT_2 Y 308 BUT_3 D-PAD X 16 DPAD_X D-PAD Y 17 DPAD_Y L1 310 L1 L2 10 L2 R1 311 R1 R2 9 R2 XBox Joystick Dimension Code 4DGame SDK Code LEFT_X 0 LEFT_X LEFT_Y 1 LEFT_Y RIGHT_X 2 RIGHT_X RIGHT_Y 5 RIGHT_Y","title":"XBox Wireless:"},{"location":"sdk/key-maps/#xbox-360-wireless","text":"XBox Key Code 4DGame SDK Code A 304 BUT_0 B 305 BUT_1 X 307 BUT_2 Y 308 BUT_3 D-PAD X 16 DPAD_X D-PAD Y 17 DPAD_Y L1 310 L1 L2 10 L2 R1 311 R1 R2 9 R2 XBox Joystick Dimension Code 4DGame SDK Code LEFT_X 0 LEFT_X LEFT_Y 1 LEFT_Y RIGHT_X 3 RIGHT_X RIGHT_Y 4 RIGHT_Y","title":"XBox 360 Wireless:"},{"location":"sdk/code-references/game-io/","text":"GameIO Core of the game-sdk. Used to communicate with other controllers and the gamecontrol. Attributes: Name Type Description mqtt_conf dict Information needed to connect controller to the mqtt broker connect ( self ) async Connect to MQTT client Source code in game_sdk/game_io.py async def connect ( self ): \"\"\" Connect to MQTT client \"\"\" await self . client . connect () publish ( self , topic , payload ) async Publish any message to any desired topic Source code in game_sdk/game_io.py async def publish ( self , topic : str , payload : dict ): \"\"\" Publish any message to any desired topic \"\"\" try : logging . debug ( \"Publish to: %s with %s \" , topic , payload ) await self . client . publish ( topic , json . dumps ( payload )) except TypeError : logging . error ( \"MQTT Payload is not JSON serializable\" ) ready ( self , seat ) async Publish ready state Parameters: Name Type Description Default seat int Controller seat required Source code in game_sdk/game_io.py async def ready ( self , seat : int ): \"\"\" Publish ready state Arguments: seat: Controller seat \"\"\" payload = dict ( seat = seat , ready = True ) await self . publish ( 'status/ready' , payload ) score ( self , score , seat ) async Publish score Parameters: Name Type Description Default score int Score required seat int Controller seat required Source code in game_sdk/game_io.py async def score ( self , score : int , seat : int ): \"\"\" Publish score Arguments: score: Score seat: Controller seat \"\"\" payload = dict ( seat = seat , score = score ) await self . publish ( 'score' , payload ) subscribe ( self ) Subscribe to the gamestatus published by the gamecontrol Source code in game_sdk/game_io.py async def subscribe ( self ): \"\"\" Subscribe to the gamestatus published by the gamecontrol \"\"\" topics = \"status/game\" async with self . client . unfiltered_messages () as messages : await self . client . subscribe ( topics ) async for msg in messages : msg : MQTTMessage = msg try : data = json . loads ( msg . payload ) mode = data [ 'mode' ] if 'mode' in data else 'idle' game_state = GameState . IDLE if mode == 'start' : game_state = GameState . START elif mode == 'run' : game_state = GameState . RUN elif mode == 'end' : game_state = GameState . END yield game_state except JSONDecodeError : logging . warning ( \"Got MQTT message with wrong format\" )","title":"GameIO"},{"location":"sdk/code-references/game-io/#gameio","text":"Core of the game-sdk. Used to communicate with other controllers and the gamecontrol. Attributes: Name Type Description mqtt_conf dict Information needed to connect controller to the mqtt broker","title":"GameIO"},{"location":"sdk/code-references/game-io/#game_sdk.game_io.GameIO.connect","text":"Connect to MQTT client Source code in game_sdk/game_io.py async def connect ( self ): \"\"\" Connect to MQTT client \"\"\" await self . client . connect ()","title":"connect()"},{"location":"sdk/code-references/game-io/#game_sdk.game_io.GameIO.publish","text":"Publish any message to any desired topic Source code in game_sdk/game_io.py async def publish ( self , topic : str , payload : dict ): \"\"\" Publish any message to any desired topic \"\"\" try : logging . debug ( \"Publish to: %s with %s \" , topic , payload ) await self . client . publish ( topic , json . dumps ( payload )) except TypeError : logging . error ( \"MQTT Payload is not JSON serializable\" )","title":"publish()"},{"location":"sdk/code-references/game-io/#game_sdk.game_io.GameIO.ready","text":"Publish ready state Parameters: Name Type Description Default seat int Controller seat required Source code in game_sdk/game_io.py async def ready ( self , seat : int ): \"\"\" Publish ready state Arguments: seat: Controller seat \"\"\" payload = dict ( seat = seat , ready = True ) await self . publish ( 'status/ready' , payload )","title":"ready()"},{"location":"sdk/code-references/game-io/#game_sdk.game_io.GameIO.score","text":"Publish score Parameters: Name Type Description Default score int Score required seat int Controller seat required Source code in game_sdk/game_io.py async def score ( self , score : int , seat : int ): \"\"\" Publish score Arguments: score: Score seat: Controller seat \"\"\" payload = dict ( seat = seat , score = score ) await self . publish ( 'score' , payload )","title":"score()"},{"location":"sdk/code-references/game-io/#game_sdk.game_io.GameIO.subscribe","text":"Subscribe to the gamestatus published by the gamecontrol Source code in game_sdk/game_io.py async def subscribe ( self ): \"\"\" Subscribe to the gamestatus published by the gamecontrol \"\"\" topics = \"status/game\" async with self . client . unfiltered_messages () as messages : await self . client . subscribe ( topics ) async for msg in messages : msg : MQTTMessage = msg try : data = json . loads ( msg . payload ) mode = data [ 'mode' ] if 'mode' in data else 'idle' game_state = GameState . IDLE if mode == 'start' : game_state = GameState . START elif mode == 'run' : game_state = GameState . RUN elif mode == 'end' : game_state = GameState . END yield game_state except JSONDecodeError : logging . warning ( \"Got MQTT message with wrong format\" )","title":"subscribe()"},{"location":"sdk/code-references/game/","text":"Game Class to control the whole game. Inherit from this class and call run() to start your game game_io property readonly Instance of GameIO used to control the whole game loop on_end ( self ) async Executed, when the game ends Source code in game_sdk/game.py async def on_end ( self ): \"\"\" Executed, when the game ends \"\"\" logging . info ( \"ON END\" ) on_exit ( self , err = None ) Executed, when the game loop is exited Parameters: Name Type Description Default err Exception Value of the exception when the game exited with none zero code None Source code in game_sdk/game.py def on_exit ( self , err : Exception = None ): \"\"\" Executed, when the game loop is exited Arguments: err: Value of the exception when the game exited with none zero code \"\"\" logging . info ( \"ON EXIT\" ) if err : logging . error ( err ) on_init ( self ) async Executed, when the game is startet with Game.run() Source code in game_sdk/game.py async def on_init ( self ): \"\"\" Executed, when the game is startet with `Game.run()` \"\"\" logging . info ( \"ON INIT\" ) on_pregame ( self ) async Executed, before a new game starts Source code in game_sdk/game.py async def on_pregame ( self ): \"\"\" Executed, before a new game starts \"\"\" logging . info ( \"ON PREGAME\" ) on_start ( self ) async Executed, when a new game starts Source code in game_sdk/game.py async def on_start ( self ): \"\"\" Executed, when a new game starts \"\"\" logging . info ( \"ON START\" ) run ( self , conf_path = '/home/pi/Controller/config.toml' , log_level =< LogLevel . NOTSET : 0 > ) Start the game engine Parameters: Name Type Description Default conf_path str Path to configuration.toml '/home/pi/Controller/config.toml' log_level LogLevel logging level <LogLevel.NOTSET: 0> Source code in game_sdk/game.py def run ( self , conf_path : str = '/home/pi/Controller/config.toml' , log_level : LogLevel = LogLevel . NOTSET ): \"\"\" Start the game engine Arguments: conf_path: Path to configuration.toml log_level: logging level \"\"\" logging . getLogger () . setLevel ( log_level . value ) try : loop = asyncio . get_event_loop () loop . run_until_complete ( self . _run ( conf_path )) except KeyboardInterrupt : self . _on_exit ()","title":"Game"},{"location":"sdk/code-references/game/#game","text":"Class to control the whole game. Inherit from this class and call run() to start your game","title":"Game"},{"location":"sdk/code-references/game/#game_sdk.game.Game.game_io","text":"Instance of GameIO used to control the whole game loop","title":"game_io"},{"location":"sdk/code-references/game/#game_sdk.game.Game.on_end","text":"Executed, when the game ends Source code in game_sdk/game.py async def on_end ( self ): \"\"\" Executed, when the game ends \"\"\" logging . info ( \"ON END\" )","title":"on_end()"},{"location":"sdk/code-references/game/#game_sdk.game.Game.on_exit","text":"Executed, when the game loop is exited Parameters: Name Type Description Default err Exception Value of the exception when the game exited with none zero code None Source code in game_sdk/game.py def on_exit ( self , err : Exception = None ): \"\"\" Executed, when the game loop is exited Arguments: err: Value of the exception when the game exited with none zero code \"\"\" logging . info ( \"ON EXIT\" ) if err : logging . error ( err )","title":"on_exit()"},{"location":"sdk/code-references/game/#game_sdk.game.Game.on_init","text":"Executed, when the game is startet with Game.run() Source code in game_sdk/game.py async def on_init ( self ): \"\"\" Executed, when the game is startet with `Game.run()` \"\"\" logging . info ( \"ON INIT\" )","title":"on_init()"},{"location":"sdk/code-references/game/#game_sdk.game.Game.on_pregame","text":"Executed, before a new game starts Source code in game_sdk/game.py async def on_pregame ( self ): \"\"\" Executed, before a new game starts \"\"\" logging . info ( \"ON PREGAME\" )","title":"on_pregame()"},{"location":"sdk/code-references/game/#game_sdk.game.Game.on_start","text":"Executed, when a new game starts Source code in game_sdk/game.py async def on_start ( self ): \"\"\" Executed, when a new game starts \"\"\" logging . info ( \"ON START\" )","title":"on_start()"},{"location":"sdk/code-references/game/#game_sdk.game.Game.run","text":"Start the game engine Parameters: Name Type Description Default conf_path str Path to configuration.toml '/home/pi/Controller/config.toml' log_level LogLevel logging level <LogLevel.NOTSET: 0> Source code in game_sdk/game.py def run ( self , conf_path : str = '/home/pi/Controller/config.toml' , log_level : LogLevel = LogLevel . NOTSET ): \"\"\" Start the game engine Arguments: conf_path: Path to configuration.toml log_level: logging level \"\"\" logging . getLogger () . setLevel ( log_level . value ) try : loop = asyncio . get_event_loop () loop . run_until_complete ( self . _run ( conf_path )) except KeyboardInterrupt : self . _on_exit ()","title":"run()"}]}