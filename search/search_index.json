{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Streamer Setup Development To write code and generate the documentation you need to install the packages listed in requirements.txt with pip pip3 install -r requirements.txt PYTHONPATH To use the 4DGame SDK you have do add the lib folder to your PYTHONPATH variable. Additionally add the src folder to your PYTHONPATH for nicer imports and automatic documentation. export PYTHONPATH = \" $( pwd ) /src: $( pwd ) /lib\" Documentation The Documentation is generated with the help of mkdocstrings . To implement a module, class or function into your documentation you have to reference it as follows: ::: library.module ::: library.module.class ::: library.module.function On Device For the usage on Device the packages listed in requirements.txt should be installed: pip install -r requirements.txt Next setup the controller service with scripts/systemd-setup","title":"Setup"},{"location":"#streamer-setup","text":"","title":"Streamer Setup"},{"location":"#development","text":"To write code and generate the documentation you need to install the packages listed in requirements.txt with pip pip3 install -r requirements.txt","title":"Development"},{"location":"#pythonpath","text":"To use the 4DGame SDK you have do add the lib folder to your PYTHONPATH variable. Additionally add the src folder to your PYTHONPATH for nicer imports and automatic documentation. export PYTHONPATH = \" $( pwd ) /src: $( pwd ) /lib\"","title":"PYTHONPATH"},{"location":"#documentation","text":"The Documentation is generated with the help of mkdocstrings . To implement a module, class or function into your documentation you have to reference it as follows: ::: library.module ::: library.module.class ::: library.module.function","title":"Documentation"},{"location":"#on-device","text":"For the usage on Device the packages listed in requirements.txt should be installed: pip install -r requirements.txt Next setup the controller service with scripts/systemd-setup","title":"On Device"},{"location":"sdk/","text":"Game SDK for Controller Structure Controls classDiagram class Input~abc.ABC~{ +__init__(int seat, str name) +reset(int seat) +getName() } class Joystick{ +JoystickCode joystick_pos +__init__(int seat, str name, JoystickCode joystick_pos) +get_direction(int x, int y) } Joystick --|> Input class JoystickCode~enum.Enum~{ LEFT_Y = 0 LEFT_X = 1 RIGHT_Y = 2 RIGHT_X = 3 } Joystick ..> JoystickCode Switch --|> Input class Switch{ +KeyCode key_bind +__init__(int seat, str name, KeyCode key_bind) +on(int seat) +off(ind seat) } class KeyCode~enum.Enum~{ BUT_0 = 0 BUT_1 = 1 BUT_2 = 2 BUT_3 = 3 DPAD_X = 4 DPAD_Y = 5 L1 = 6 L2 = 7 R1 = 8 R2 = 9 } Switch ..> KeyCode class GamePad { +dict key_map +dict joystick_map +KeyCode mapKey(int key_code) } GamePad ..> KeyCode GamePad ..> JoystickCode class XBox { } XBox --|> GamePad Game classDiagram class Game{ +list controls +dict config -evdev.InputDevice input_dev -bool is_running -GameIO game_io +GameIO game_io +on_init() +on_pregame() +on_start() +on_end() -ctl_sub(dict: ctl_conf) -game_io_sub(dict: mqtt_conf) -run(str conf_path) +run(str conf_path, int log_level) } class LogLevel~enum.Enum~{ +CRITICAL = 50 +ERROR = 40 +WARNING = 30 +INFO = 20 +DEBUG = 10 +NOTSET = 0 } Game ..> LogLevel class GameIO{ +asyncio_mqtt.Client client +__init__(dict mqtt_conf) +subscribe() +publish(str topic, dict payload) +ready(int seat) +score(int score, int seat) } Game ..> GameIO class GameState~enum.Enum~{ IDLE = \"idle\" START = \"start\" RUN = \"run\" END = \"end\" } GameIO ..> GameState Game ..> GameState MQTT Communication","title":"Structure"},{"location":"sdk/#game-sdk-for-controller","text":"","title":"Game SDK for Controller"},{"location":"sdk/#structure","text":"","title":"Structure"},{"location":"sdk/#controls","text":"classDiagram class Input~abc.ABC~{ +__init__(int seat, str name) +reset(int seat) +getName() } class Joystick{ +JoystickCode joystick_pos +__init__(int seat, str name, JoystickCode joystick_pos) +get_direction(int x, int y) } Joystick --|> Input class JoystickCode~enum.Enum~{ LEFT_Y = 0 LEFT_X = 1 RIGHT_Y = 2 RIGHT_X = 3 } Joystick ..> JoystickCode Switch --|> Input class Switch{ +KeyCode key_bind +__init__(int seat, str name, KeyCode key_bind) +on(int seat) +off(ind seat) } class KeyCode~enum.Enum~{ BUT_0 = 0 BUT_1 = 1 BUT_2 = 2 BUT_3 = 3 DPAD_X = 4 DPAD_Y = 5 L1 = 6 L2 = 7 R1 = 8 R2 = 9 } Switch ..> KeyCode class GamePad { +dict key_map +dict joystick_map +KeyCode mapKey(int key_code) } GamePad ..> KeyCode GamePad ..> JoystickCode class XBox { } XBox --|> GamePad","title":"Controls"},{"location":"sdk/#game","text":"classDiagram class Game{ +list controls +dict config -evdev.InputDevice input_dev -bool is_running -GameIO game_io +GameIO game_io +on_init() +on_pregame() +on_start() +on_end() -ctl_sub(dict: ctl_conf) -game_io_sub(dict: mqtt_conf) -run(str conf_path) +run(str conf_path, int log_level) } class LogLevel~enum.Enum~{ +CRITICAL = 50 +ERROR = 40 +WARNING = 30 +INFO = 20 +DEBUG = 10 +NOTSET = 0 } Game ..> LogLevel class GameIO{ +asyncio_mqtt.Client client +__init__(dict mqtt_conf) +subscribe() +publish(str topic, dict payload) +ready(int seat) +score(int score, int seat) } Game ..> GameIO class GameState~enum.Enum~{ IDLE = \"idle\" START = \"start\" RUN = \"run\" END = \"end\" } GameIO ..> GameState Game ..> GameState","title":"Game"},{"location":"sdk/#mqtt-communication","text":"","title":"MQTT Communication"},{"location":"sdk/config-file/","text":"Config File To configure the game sdk a config.toml can be created. The path to it can be set when executing Game.run(config_path=\"path/to/your/config.toml\") . The default path is /home/pi/Controller/config.toml Structure Example seat = 1 [CONTROLLER] input_device = \"/dev/input/event1\" [MQTT] broker_ip = \"192.168.1.20\" borker_port = \"1883\" username = \"mqtt\" password = \"secret\" int seat : ID of your controller CONTROLLER Configuration for the connected gamepad str input_device : Path to your input device MQTT Configuration to connect to the mqtt broker of the gamecontrol str broker_ip : Adress to your mqtt broker str broker_port (Optional): MQTT Port of your broker (default 1883 ) str username (Optional): Username for authentifikation (default NONE ) str password (Optional): Password for authentifikation (default NONE )","title":"Config File"},{"location":"sdk/config-file/#config-file","text":"To configure the game sdk a config.toml can be created. The path to it can be set when executing Game.run(config_path=\"path/to/your/config.toml\") . The default path is /home/pi/Controller/config.toml","title":"Config File"},{"location":"sdk/config-file/#structure","text":"Example seat = 1 [CONTROLLER] input_device = \"/dev/input/event1\" [MQTT] broker_ip = \"192.168.1.20\" borker_port = \"1883\" username = \"mqtt\" password = \"secret\" int seat : ID of your controller","title":"Structure"},{"location":"sdk/config-file/#controller","text":"Configuration for the connected gamepad str input_device : Path to your input device","title":"CONTROLLER"},{"location":"sdk/config-file/#mqtt","text":"Configuration to connect to the mqtt broker of the gamecontrol str broker_ip : Adress to your mqtt broker str broker_port (Optional): MQTT Port of your broker (default 1883 ) str username (Optional): Username for authentifikation (default NONE ) str password (Optional): Password for authentifikation (default NONE )","title":"MQTT"},{"location":"sdk/key-maps/","text":"Key Maps XBox: XBox Key Code 4DGame SDK Code A 304 BUT_0 B 305 BUT_1 X 307 BUT_2 Y 308 BUT_3 D-PAD X 16 DPAD_X D-PAD Y 17 DPAD_Y L1 310 L1 L2 10 L2 R1 311 R1 R2 9 R2 XBox Joystick Dimension Code 4DGame SDK Code LEFT_X 0 LEFT_X LEFT_Y 1 LEFT_Y RIGHT_X 2 RIGHT_X RIGHT_Y 5 RIGHT_Y","title":"Key Maps"},{"location":"sdk/key-maps/#key-maps","text":"","title":"Key Maps"},{"location":"sdk/key-maps/#xbox","text":"XBox Key Code 4DGame SDK Code A 304 BUT_0 B 305 BUT_1 X 307 BUT_2 Y 308 BUT_3 D-PAD X 16 DPAD_X D-PAD Y 17 DPAD_Y L1 310 L1 L2 10 L2 R1 311 R1 R2 9 R2 XBox Joystick Dimension Code 4DGame SDK Code LEFT_X 0 LEFT_X LEFT_Y 1 LEFT_Y RIGHT_X 2 RIGHT_X RIGHT_Y 5 RIGHT_Y","title":"XBox:"}]}